name: CI/CD

permissions:
  contents: write  # needed for release + pushing README updates

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  version:
    name: Extract Version
    runs-on: ubuntu-latest
    environment: production
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      is_tag: ${{ steps.set-tag.outputs.is_tag }}
    steps:
      - name: Derive tag or fallback
        id: set-tag
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            IS_TAG=true
          else
            TAG="latest"
            IS_TAG=false
          fi
          echo "tag=$TAG"       >> "$GITHUB_OUTPUT"
          echo "is_tag=$IS_TAG" >> "$GITHUB_OUTPUT"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: version
    environment: production
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8

      - name: Lint (error-only gate)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Lint (metrics)
        run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run tests + coverage
        run: |
          coverage run manage.py test
          coverage xml
          coverage report -m

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  dockerhub:
    name: Build & Push Docker Hub
    runs-on: ubuntu-latest
    needs: [test, version]
    environment: production
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push
        env:
          TAG: ${{ needs.version.outputs.tag }}
        run: |
          docker build -t abu99/prayer-api:${TAG} .
          docker push abu99/prayer-api:${TAG}
          if [[ ("${{ github.ref_type }}" == "branch" && "${{ github.ref_name }}" == "main") || "${{ needs.version.outputs.is_tag }}" == "true" ]]; then
            docker tag abu99/prayer-api:${TAG} abu99/prayer-api:latest
            docker push abu99/prayer-api:latest
          fi

  ecr:
    name: Build & Push AWS ECR
    runs-on: ubuntu-latest
    needs: [test, version]
    environment: production
    if: github.event_name != 'pull_request'
    outputs:
      ecr_repo_url: ${{ steps.set-vars.outputs.ecr_repo_url }}
      image_tag: ${{ steps.set-vars.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Public ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build & push
        id: set-vars
        env:
          TAG: ${{ needs.version.outputs.tag }}
          ECR_REPO: ${{ vars.ECR_REPO_URL }}
        run: |
          docker build -t "${ECR_REPO}:${TAG}" .
          docker push "${ECR_REPO}:${TAG}"
          if [[ ("${{ github.ref_type }}" == "branch" && "${{ github.ref_name }}" == "main") || "${{ needs.version.outputs.is_tag }}" == "true" ]]; then
            docker tag "${ECR_REPO}:${TAG}" "${ECR_REPO}:latest"
            docker push "${ECR_REPO}:latest"
          fi
          echo "ecr_repo_url=${ECR_REPO}" >> "$GITHUB_OUTPUT"
          echo "image_tag=${TAG}"         >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy to AWS (Terraform)
    runs-on: ubuntu-latest
    needs: [dockerhub, ecr]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    outputs:
      alb_url: ${{ steps.set-alb-url.outputs.alb_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        run: terraform -chdir=infra init -input=false

      - name: Terraform plan
        run: terraform -chdir=infra plan -input=false
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_ecr_repo_url: ${{ needs.ecr.outputs.ecr_repo_url }}
          TF_VAR_image_tag: ${{ needs.ecr.outputs.image_tag }}

      - name: Terraform apply
        run: terraform -chdir=infra apply -input=false -auto-approve
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_ecr_repo_url: ${{ needs.ecr.outputs.ecr_repo_url }}
          TF_VAR_image_tag: ${{ needs.ecr.outputs.image_tag }}

      - name: Capture Terraform outputs
        id: tf-out
        run: terraform -chdir=infra output -json > tf_outputs.json

      - name: Extract ALB URL
        id: set-alb-url
        shell: bash
        run: |
          URL=$(jq -r '.alb_dns_name.value' tf_outputs.json)
          echo "ALB URL: ${URL}"
          echo "alb_url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Summarize deployment
        run: |
          echo "## ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL:** [${{ steps.set-alb-url.outputs.alb_url }}](${{ steps.set-alb-url.outputs.alb_url }})" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Release (includes ALB URL)
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            ### Deployment
            **Service URL:** ${{ steps.set-alb-url.outputs.alb_url }}

      # README update is optional but supports always showing the latest deployed URL.
      # It will only modify the section between the markers if they exist.
#      - name: Update README with latest ALB URL
#        if: ${{ always() }}
#        shell: bash
#        run: |
#          # Ensure we're on the default branch (tags check out a detached ref)
#          git fetch origin main
#          git checkout main
#
#          URL='${{ steps.set-alb-url.outputs.alb_url }}'
#          if [[ -z "$URL" || "$URL" == "null" ]]; then
#            echo "No ALB URL found; skipping README update."
#            exit 0
#          fi
#
#          if [[ ! -f README.md ]]; then
#            echo "README.md not found; skipping."
#            exit 0
#          fi
#
#          # Update content only inside markers. If markers are absent, skip.
#          # Marker block expected in README.md:
#          # <!-- START_SERVICE_URL -->
#          # <!-- END_SERVICE_URL -->
#          if grep -q "<!-- START_SERVICE_URL -->" README.md && grep -q "<!-- END_SERVICE_URL -->" README.md; then
#            awk -v url="$URL" '
#              BEGIN { inblk=0 }
#              /<!-- START_SERVICE_URL -->/ { print; inblk=1; print ""; print "**Latest deployment:** [" url "](" url ")"; next }
#              /<!-- END_SERVICE_URL -->/   { inblk=0; print; next }
#              { if (!inblk) print }
#            ' README.md > README.md.new && mv README.md.new README.md
#
#            if ! git diff --quiet -- README.md; then
#              git config user.name  "github-actions[bot]"
#              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
#              git add README.md
#              git commit -m "docs: update latest deployment URL in README [skip ci]"
#              git push origin main
#            else
#              echo "README already up-to-date."
#            fi
#          else
#            echo "Markers not found; skipping README update."
#          fi
