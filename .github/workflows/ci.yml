name: CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ] # Semantic version tags trigger release builds
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run tests with coverage
        run: |
          coverage run manage.py test
          coverage xml
          coverage report -m

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }} # Optional if repo is public

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker Hub login
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Configure AWS credentials (must be us-east-1 for ECR Public)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # AWS ECR Public login
      - name: Log in to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Extract version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker image
        run: |
          # Docker Hub
          docker build -t abu99/prayer-api:${{ env.TAG }} .
          docker push abu99/prayer-api:${{ env.TAG }}
          docker tag abu99/prayer-api:${{ env.TAG }} abu99/prayer-api:latest
          docker push abu99/prayer-api:latest

          # ECR Public
          IMAGE_URI=${{ steps.login-ecr-public.outputs.registry }}/prayer-api:${{ env.TAG }}
          docker tag abu99/prayer-api:${{ env.TAG }} $IMAGE_URI
          docker push $IMAGE_URI

          echo "ECR_IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy:
    name: Deploy to AWS (Terraform)
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Export image tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "TF_VAR_image_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "TF_VAR_image_tag=latest" >> $GITHUB_ENV
          fi
          echo "TF_VAR_aws_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform -chdir=infra init -input=false

      - name: Terraform Plan
        run: terraform -chdir=infra plan -input=false -out=tfplan

      - name: Terraform Apply
        run: terraform -chdir=infra apply -input=false -auto-approve tfplan

      - name: Capture Terraform Outputs
        id: tf-out
        run: |
          terraform -chdir=infra output -json > tf_outputs.json
          cat tf_outputs.json

      - name: Post Deployment Summary
        run: |
          URL=$(jq -r '.apprunner_service_url.value' tf_outputs.json)
          IMAGE=$(jq -r '.deployed_image.value' tf_outputs.json)

          echo "## ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL:** [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed Image:** \`$IMAGE\`" >> $GITHUB_STEP_SUMMARY

      - name: Tag Release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
