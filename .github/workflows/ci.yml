name: CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Extract version/tag
        id: set-tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="latest"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: version
    environment: production
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8
      - run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      - run: |
          coverage run manage.py test
          coverage xml
          coverage report -m
      - uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  dockerhub:
    name: Build & Push Docker Hub
    runs-on: ubuntu-latest
    needs: [test, version]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          TAG=${{ needs.version.outputs.tag }}
          docker build -t abu99/prayer-api:$TAG .
          docker push abu99/prayer-api:$TAG
          docker tag abu99/prayer-api:$TAG abu99/prayer-api:latest
          docker push abu99/prayer-api:latest

  ecr:
    name: Build & Push AWS ECR
    runs-on: ubuntu-latest
    needs: [test, version]
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          registry-type: public
      - run: |
          TAG=${{ needs.version.outputs.tag }}
          ECR_REPO=${{ vars.ECR_REPO_URL }}
          docker build -t $ECR_REPO:$TAG .
          docker push $ECR_REPO:$TAG
          echo "TF_VAR_ecr_repo_url=$ECR_REPO" >> $GITHUB_ENV
          echo "TF_VAR_image_tag=$TAG" >> $GITHUB_ENV

  deploy:
    name: Deploy to AWS (Terraform)
    runs-on: ubuntu-latest
    needs: [dockerhub, ecr]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - run: terraform -chdir=infra init -input=false
      - run: terraform -chdir=infra plan -input=false -out=tfplan
      - run: terraform -chdir=infra apply -input=false -auto-approve tfplan
      - id: tf-out
        run: |
          terraform -chdir=infra output -json > tf_outputs.json
          cat tf_outputs.json
      - run: |
          URL=$(jq -r '.apprunner_service_url.value' tf_outputs.json)
          IMAGE=$(jq -r '.deployed_image.value' tf_outputs.json)
          echo "## ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL:** [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed Image:** \`$IMAGE\`" >> $GITHUB_STEP_SUMMARY
      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
